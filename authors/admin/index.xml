<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Somnath Rakshit</title><link>https://somnathrakshit.github.io/authors/admin/</link><atom:link href="https://somnathrakshit.github.io/authors/admin/index.xml" rel="self" type="application/rss+xml"/><description>Somnath Rakshit</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Somnath Rakshit, 2020</copyright><lastBuildDate>Sun, 05 Apr 2020 03:13:05 -0500</lastBuildDate><image><url>https://somnathrakshit.github.io/img/avatar.jpg</url><title>Somnath Rakshit</title><link>https://somnathrakshit.github.io/authors/admin/</link></image><item><title>Answerability Classification Using Hand-Crafted Features</title><link>https://somnathrakshit.github.io/project/vizwiz/</link><pubDate>Sun, 05 Apr 2020 03:13:05 -0500</pubDate><guid>https://somnathrakshit.github.io/project/vizwiz/</guid><description>&lt;p>Competing with the members in your class on a challenge to predict whether a visual question is answerable. For this task, we were required to create a multi-modal (computer vision + natural language processing) classification system.&lt;/p>
&lt;p>Microsoft Azure Vision API has been used to obtain the tags for each image. They have been joined together with space character in between to create artifical sentence. Then, the TF-IDF representation for these artificially generated sentences are created to be used as features. The TF-IDF representation for the questions have been created as features.&lt;/p>
&lt;p>The two TF-IDF matrices are now stacked horizontally to create the unified feature set. We use this as the input dataset for our machine learning model. Random forest model has been used for this.&lt;/p>
&lt;p>However, we see that the dataset is imbalanced. Thus, we try to resample the dataset so that the minority class has equal number of samples as the majority class. We do this by randomly copying the samples. Finally, with this resampled dataset, we once again run a random forest classifier. We see that the results improve.&lt;/p>
&lt;p>Finally, we run Grid Search to find the best hyperparameter for the random forest model and test it on the validation set, which has not been resampled. We see that when the number of estimators is equal to 1000, random forest model performs the best with accuracy metric.&lt;/p></description></item><item><title>Relevance Prediction from Eye-movements Using Semi-interpretable Convolutional Neural Networks</title><link>https://somnathrakshit.github.io/publication/relevance-prediction-eye-movements-chiir-2020/</link><pubDate>Tue, 10 Dec 2019 16:16:12 -0600</pubDate><guid>https://somnathrakshit.github.io/publication/relevance-prediction-eye-movements-chiir-2020/</guid><description/></item><item><title>Survival Analysis with the Integration of RNA-Seq and Clinical Data to Identify Breast Cancer Subtype Specific Genes</title><link>https://somnathrakshit.github.io/publication/survival-rnaseq-breast-cancer/</link><pubDate>Wed, 27 Nov 2019 00:02:32 -0600</pubDate><guid>https://somnathrakshit.github.io/publication/survival-rnaseq-breast-cancer/</guid><description/></item><item><title>Identification of Breast Cancer subtype specific MicroRNAs using Survival Analysis to find their role in transcriptomic regulation</title><link>https://somnathrakshit.github.io/publication/mirna-breast-cancer-subtypes/</link><pubDate>Mon, 30 Sep 2019 23:54:41 -0500</pubDate><guid>https://somnathrakshit.github.io/publication/mirna-breast-cancer-subtypes/</guid><description/></item><item><title>Identification of Epigenetic Biomarkers with the use of Gene Expression and DNA Methylation for Breast Cancer Subtypes</title><link>https://somnathrakshit.github.io/publication/epigenetics-tencon2019/</link><pubDate>Fri, 02 Aug 2019 20:02:51 +0530</pubDate><guid>https://somnathrakshit.github.io/publication/epigenetics-tencon2019/</guid><description/></item><item><title>Genome-wide Analysis of Multi-View Data of miRNA-seq to Identify miRNA Biomarkers for Stomach Cancer</title><link>https://somnathrakshit.github.io/publication/multi-view-mirna-stad/</link><pubDate>Thu, 25 Jul 2019 20:40:46 +0530</pubDate><guid>https://somnathrakshit.github.io/publication/multi-view-mirna-stad/</guid><description/></item><item><title>A Comprehensive Guide to Sorting in Pandas</title><link>https://somnathrakshit.github.io/post/sorting_in_pandas/</link><pubDate>Sat, 01 Jun 2019 12:52:56 +0200</pubDate><guid>https://somnathrakshit.github.io/post/sorting_in_pandas/</guid><description>&lt;p>In order to sort rows in &lt;code>Pandas&lt;/code>, you can use the &lt;code>sort_values()&lt;/code> function. I have taken examples from this excellant
&lt;a href="https://datatofish.com/sort-pandas-dataframe/" target="_blank" rel="noopener">blog&lt;/a>. Although it shows a lot of the use cases covered here, the last case is absent pretty much everywhere.&lt;/p>
&lt;p>In this tutorial, I will be showing how to use &lt;code>Pandas&lt;/code> to sort rows based on different criterion.&lt;/p>
&lt;h2>Table of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#column-in-an-ascending-order">Column in an ascending order&lt;/a>&lt;/li>
&lt;li>&lt;a href="#column-in-an-descending-order">Column in an descending order&lt;/a>&lt;/li>
&lt;li>&lt;a href="#by-multiple-columns---same-data-type">By multiple columns - Same data type&lt;/a>&lt;/li>
&lt;li>&lt;a href="#by-multiple-columns---mixed-data-type">By multiple columns - Mixed data type&lt;/a>&lt;/li>
&lt;li>&lt;a href="#by-multiple-columns-and-mixed-order">By multiple columns and mixed order&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;p>You can run a colab notebook containing all code present in this post by clicking here.
&lt;a href="https://colab.research.google.com/gist/somnathrakshit/88a4684a1eb97b782b07a2f758ad3e3c/pandas_sort.ipynb" target="_parent">&lt;img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/>&lt;/a>&lt;/p>
&lt;p>Let us create our &lt;code>DataFrame&lt;/code> (df) in pandas&lt;/p>
&lt;pre>&lt;code>from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000, 25000, 27000, 35000],
'Year': [2015, 2013, 2018, 2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="column-in-an-ascending-order">Column in an ascending order&lt;/h2>
&lt;p>To sort this df based on the column &lt;code>Brand&lt;/code>, we can use the &lt;code>sort_values()&lt;/code> function in this manner. Here, &lt;code>inplace=True&lt;/code> means that the df will be sorted in-memory. Also, by default, the &lt;code>df&lt;/code> is sorted in ascending order. But we can change it easily, as will be shown later.&lt;/p>
&lt;pre>&lt;code>df.sort_values(by=['Brand'], inplace=True)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;p>The complete code to perform the task above is shown below.&lt;/p>
&lt;pre>&lt;code>from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort Brand - ascending order
df.sort_values(by=['Brand'], inplace=True)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="column-in-an-descending-order">Column in an descending order&lt;/h2>
&lt;p>Now, suppose we would like to sort df in descending order. Well, &lt;code>sort_values()&lt;/code> accepts a paramter named &lt;code>ascending&lt;/code>. By passing &lt;code>ascending=True&lt;/code>, you can sort the df in descending order. The code is given below.&lt;/p>
&lt;pre>&lt;code>df.sort_values(by=['Brand'], inplace=True, ascending=False)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code># sort - descending order
from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort Brand - descending order
df.sort_values(by=['Brand'], inplace=True, ascending=False)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="by-multiple-columns---same-data-type">By multiple columns - Same data type&lt;/h2>
&lt;p>In the next step, we would like to sort based on two columns. So, here, we first sort by &lt;code>Year&lt;/code> and then by the &lt;code>Price&lt;/code> of the car. &lt;code>sort_values()&lt;/code> accepts a parameter called by. The by paramters can accept a string literal or it can accept a list. We simply need to pass the list containing the columns by which we want the df to be sorted. This is shown below.&lt;/p>
&lt;pre>&lt;code> df.sort_values(by=['Year','Price'], inplace=True)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code># sort by multiple columns
from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort by multiple columns: Year and Price
df.sort_values(by=['Year','Price'], inplace=True)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="by-multiple-columns---mixed-data-type">By multiple columns - Mixed data type&lt;/h2>
&lt;p>It is also possible to pass mixed type of columns to be sorted. For example, we can pass the &lt;code>Year&lt;/code> column (integer) and the &lt;code>Brand&lt;/code> column (string). Pandas accepts this without any problem.&lt;/p>
&lt;pre>&lt;code>df.sort_values(by=['Year','Brand'], inplace=True)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code># sort by multiple columns
from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort by multiple columns: Year and Brand
df.sort_values(by=['Year','Brand'], inplace=True)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="by-multiple-columns-and-mixed-order">By multiple columns and mixed order&lt;/h2>
&lt;p>Last but not the least, it is also possible to sort multiple columns in mixed order. For example, we may want to sort by &lt;code>Year&lt;/code> and &lt;code>Brand&lt;/code> where the &lt;code>Year&lt;/code> column needs to be sorted in descending order whereas the &lt;code>Brand&lt;/code> column needs to be sorted in ascening order. Pandas performs this by accepting list in addition to a boolean variable to the &lt;code>ascending&lt;/code> parameter. The correct intuitive way of doing this is shown below.&lt;/p>
&lt;pre>&lt;code>df.sort_values(by=['Year','Brand'], ascending=[False, True], inplace=True)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code># sort by multiple columns but different order
from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort by multiple columns: Year and Brand
df.sort_values(by=['Year','Brand'], ascending=[False, True], inplace=True)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;p>You can know more about sorting in Pandas by visiting the
&lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sort_values.html" target="_blank" rel="noopener">official documentation&lt;/a>.&lt;/p></description></item><item><title>Some perspectives on living in Warsaw for 4 months</title><link>https://somnathrakshit.github.io/post/warsaw-perspectives/</link><pubDate>Sat, 01 Jun 2019 02:46:52 +0200</pubDate><guid>https://somnathrakshit.github.io/post/warsaw-perspectives/</guid><description>&lt;h2 id="city">City&lt;/h2>
&lt;p>I have been living in Warsaw since 15th February of this year. During these past few months, I have been able to gain some insight into this city and its people. Firstly, this was my first experience of an European city. Frankly, this was an welcoming change from the huge cities that we are accustomed to in India. I came to know from many people here that most European cities are walk-able, something which we can only dream of in the big Indian cities. Apart from this, I have noticed that people honk rarely. During my stay here since the past three and a half months, I have heard the sound of horn less than ten times. I am sure that in Kolkata, it would take me ten minutes on a busy day to cross that number.&lt;/p>
&lt;h2 id="food">Food&lt;/h2>
&lt;p>Talking of food, potato is the staple food here. To imagine the scale of this, consider replacing rice from your daily meal with boiled potatoes. This is exactly what happens here. However, rice is available at almost all shops. Indian spices are tougher to get but there are a few South Asian shops who sell them. All said, Polish food is usually good with less oil and salt, making it generally healthy.&lt;/p>
&lt;h2 id="language">Language&lt;/h2>
&lt;p>Language is a real barrier in Poland. Polish is one of the toughest languages to learn for a beginner. The struggle is real because very few people speak English here. However, the younger generation, in general, can communicate in English. It is almost imperative to learn a few of the most used Polish words in order to navigate day-to-day life here. But the Polish people are helpful and kind. It makes them happy to see foreigners being able to speak their language.&lt;/p>
&lt;h2 id="transportation">Transportation&lt;/h2>
&lt;p>Publis transport is highly efficient in Warsaw. The entire city is well-connected by means of buses, metro and trams. All of these forms of transport are run by a single company and hence, you only need to buy a single ticket to access any of these throughout the city. Apart from the 20 and 40 minute passes, long-term passes like daily, weekly, monthly and quarterly passes are available which offer unlimited rides during their valid period. Public transportation is extremely punctual here. There is an Android as well as a Web app named Jakdojade which shows timings of all three forms of transport here. Roads have dedicated bus-lanes for convenience of the public. Cycling lanes are aplenty and cycling is highly encouraged here.&lt;/p>
&lt;h2 id="places-to-visit">Places to visit&lt;/h2>
&lt;p>Warsaw is a tourist hostpot. It&amp;rsquo;s Old Town, which was destroyed after the World War II, has been reconstructed to depict the earlier times. This is now a UNESCO World Heritage Site. Apart from this, there are old churches, musueums and palaces to visit. The Palace of Culture and Science is present at the heart of the city. It was a gift from Stalin to the people of this city. Apart from these, Warsaw is a city of parks. There are numerous parks that act as the lungs of this city. Lazienki Park, Pole Mokotowski, etc. are the most well-known. Many activities take place in the parks during spring and summer seasons.&lt;/p>
&lt;h2 id="final-words">Final words&lt;/h2>
&lt;p>Warsaw is a city that is young in nature as compared to other European cities. It is modern and has all facilities of a developed city. Warsaw is slowly starting to become a tech hub. Currently, it has offices of Google, Facebook and Amazon here. The University of Warsaw is well-known in mathematics and helps in attracting the tech jobs to this city.&lt;/p>
&lt;p>At the time of writing, I have less than two weeks before returning to Kolkata. The past few months have been a wonderful learning experience for me. I have been able to meet people of diverse cultures from various parts of the world. I am sure that this experience will be invaluable to me in the upcoming future.
&lt;div class="gallery">
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190217_141200.jpg" data-caption="Old Town in Warsaw">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190217_141200_huf7f0f31711eae501a3f617f23a3c8a9b_90429_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190217_142040.jpg" data-caption="Old Town in Warsaw">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190217_142040_hu85e67afd591fb9c36865fb308c9055c2_100670_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190217_145558.jpg" data-caption="Warsaw Uprising Monument">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190217_145558_hu84d9b193943ddf2095293ebd07c00918_348045_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="253" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190322_095343.jpg" data-caption="I Love Warsaw signboard near the Warsaw Spire building">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190322_095343_hub139f875b8132f8e51b1ad18f78d0bd5_155039_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190326_170012.jpg" data-caption="Snowfall in Warsaw">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190326_170012_hubc0e6ed9f624218fe1dcaf2916614ab8_220636_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190410_162741.jpg" data-caption="Early Spring near CeNT">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190410_162741_hub58eb33d31e111610101bd671800993d_237559_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190420_154732.jpg" data-caption="Flowers near the Central Railway Station">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190420_154732_hub89e9c9f52e0af2f20f05efc6016e77a_298510_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190420_165609.jpg" data-caption="Wilanow Palace">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190420_165609_huc267405e1e1ca6a78429367d30c6c3ad_157304_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190420_170209.jpg" data-caption="Wilanow Palace again">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190420_170209_hu0ef56cce9585abce899bddc33fa66e8f_181258_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190501_130053.jpg" data-caption="Lazienki Park">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190501_130053_hu65cec139e6573e7f28dfb2517bbcd6b6_305727_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_123910.jpg" data-caption="Solar Clock in the Lazienki Park">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_123910_hu0a8a7f269329615f2ad178c6d5a96fee_160650_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_124243.jpg" data-caption="Royal Bath in the Lazienki Park">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_124243_hub2ec64e8982635ed6faa1d5d85cb01e2_224151_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_124800.jpg" data-caption="Lazienki Park">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_124800_hu6389821eaa52d4537c7668cbbb5c4797_316276_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_125259.jpg" data-caption="Flowers planted everywhere during Spring">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_125259_hub9c9d2a6879df64d5e70eb3171eb7e21_327282_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_130907.jpg" data-caption="One of my clicks inside the Lazienki Park">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_130907_hu0c1d9e13625b72875701310b9a435446_321242_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="338" height="190">
&lt;/a>
&lt;a data-fancybox="gallery-warsaw" href="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_135636.jpg" data-caption="With the National Bird of India in Poland">
&lt;img data-src="https://somnathrakshit.github.io/post/warsaw-perspectives/warsaw/IMG_20190503_135636_hua6c17b5af4d2c3370ff62a0b65378921_333015_0x190_resize_q90_lanczos.jpg" class="lazyload" alt="" width="253" height="190">
&lt;/a>
&lt;/div>&lt;/p></description></item><item><title>Hello World</title><link>https://somnathrakshit.github.io/post/hello-world/</link><pubDate>Tue, 28 May 2019 02:43:00 +0200</pubDate><guid>https://somnathrakshit.github.io/post/hello-world/</guid><description>&lt;p>I spent a lot of time today thinking about what to write here. After some time, I decided it wasnât worthwhile to think beforehand about it. Maybe, the best way to go about it is to write about something new that I learned. So, this will blog will have no fixed topic. I will write about anything interesting that I learn. Be it technology, general knowledge or whatever, I will write about it if I find it to be interesting (and of course, I get some free time as well :P).&lt;/p>
&lt;p>So, hereâs to this blog. May it succeed.&lt;/p></description></item><item><title>A New Evolutionary Rough Fuzzy Integrated Machine Learning Technique for microRNA selection using Next-Generation Sequencing data of Breast Cancer</title><link>https://somnathrakshit.github.io/publication/gecco-pso-rfcm-rf/</link><pubDate>Wed, 01 May 2019 10:47:26 +0200</pubDate><guid>https://somnathrakshit.github.io/publication/gecco-pso-rfcm-rf/</guid><description/></item><item><title>Identification of Four miRNAs by Analysing Multi-View miRNA-seq Data of Stomach Cancer</title><link>https://somnathrakshit.github.io/publication/identify-four-mirnas-stad-tensymp-2019/</link><pubDate>Sat, 20 Apr 2019 11:01:12 +0200</pubDate><guid>https://somnathrakshit.github.io/publication/identify-four-mirnas-stad-tensymp-2019/</guid><description/></item><item><title>Deep Learning for Detection and Localization of Thoracic Diseases using Chest X-Ray Imagery</title><link>https://somnathrakshit.github.io/publication/chexray/</link><pubDate>Sat, 16 Mar 2019 01:59:10 +0200</pubDate><guid>https://somnathrakshit.github.io/publication/chexray/</guid><description/></item><item><title>Detection of Diseases in Potato Leaves using Transfer Learning</title><link>https://somnathrakshit.github.io/publication/potato-leaves-transfer-learning/</link><pubDate>Sun, 20 Jan 2019 14:21:24 +0530</pubDate><guid>https://somnathrakshit.github.io/publication/potato-leaves-transfer-learning/</guid><description>&lt;script type="application/javascript" src="https://gist.github.com/somnathrakshit/22fcb7736e24254940b4216621781681.js">&lt;/script></description></item><item><title>Deep Learning for Integrated Analysis of Breast Cancer Subtype Specific Multi-omics Data</title><link>https://somnathrakshit.github.io/publication/breast-cancer-integrated-sae/</link><pubDate>Wed, 31 Oct 2018 01:23:15 +0200</pubDate><guid>https://somnathrakshit.github.io/publication/breast-cancer-integrated-sae/</guid><description/></item><item><title>Machine Learning for Object Labelling</title><link>https://somnathrakshit.github.io/publication/oblab2018/</link><pubDate>Wed, 31 Oct 2018 01:23:15 +0200</pubDate><guid>https://somnathrakshit.github.io/publication/oblab2018/</guid><description/></item><item><title>Neural Style Transfer</title><link>https://somnathrakshit.github.io/project/neural-style-transfer/</link><pubDate>Wed, 03 Oct 2018 02:32:45 +0530</pubDate><guid>https://somnathrakshit.github.io/project/neural-style-transfer/</guid><description>&lt;p>Google Photos album containing the images is present
&lt;a href="https://photos.app.goo.gl/GmeSraqqvKPxu7Zb6" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>Implemented the neural style transfer algortihm implemented by Gatys et al. (2016) in PyTorch. This technique allows us to take an input image and perform its reproduction in a new artistic style. This algorithm takes two images as inputs. One is the style image that contains the artistic style whereas the other image contains the content which is to be modified in the given artistic style.&lt;/p></description></item><item><title>geograpy3</title><link>https://somnathrakshit.github.io/project/geograpy3/</link><pubDate>Tue, 25 Sep 2018 02:42:18 +0530</pubDate><guid>https://somnathrakshit.github.io/project/geograpy3/</guid><description>&lt;p>geograpy3 is a fork of
&lt;a href="https://github.com/Corollarium/geograpy2" target="_blank" rel="noopener">Geograpy2&lt;/a>, which is itself a fork of
&lt;a href="https://github.com/ushahidi/geograpy" target="_blank" rel="noopener">geograpy&lt;/a> and inherits most of it, but solves several problems (such as support for utf8, places names with multiple words, confusion over homonyms etc). Also, geograpy3 is compatible with Python 3, unlike Geography2.&lt;/p>
&lt;p>This is installable from PyPi by running the following command.&lt;/p>
&lt;p>&lt;code>pip install geograpy3&lt;/code>&lt;/p></description></item><item><title>Detection and Localisation of Diabetic Retinopathy</title><link>https://somnathrakshit.github.io/project/fundus-image-localization/</link><pubDate>Tue, 15 May 2018 01:21:26 +0530</pubDate><guid>https://somnathrakshit.github.io/project/fundus-image-localization/</guid><description>&lt;p>
&lt;a href="https://docs.google.com/presentation/d/e/2PACX-1vQpi7z7g1swVv-bcG2GeYggnhCjL1zXOq3BJYMXnqGtJC6pVg7Iq7qr-4bODfVGEcngX9PGiuJ5P8Qs/pub?start=false&amp;amp;loop=false&amp;amp;delayms=15000" target="_blank" rel="noopener">Slides&lt;/a>,
&lt;a href="https://somnathrakshit.github.io/files/download/project_report_jgec.pdf">Report&lt;/a>&lt;/p>
&lt;p>Diabetic retinopathy occurs when the retina is damaged because fluids leak from blood vessels into the retina. The presence of hemorrhage is one of the earliest signs to indicate the severity of the disease. In this paper we review techniques, algorithms and methodologies used for the detection of hemorrhage from diabetic retinopathy retinal images. The retina is a transparent layer of vascularized neural tissue lining the inner layer of the back wall of the eye, between the retinal pigment epithelium on the outer and the vitreous on the inner side. The retina captures photons and converts these two photochemical and electrical energy integrates the Signals and transmits the resultant signal to the visual cortex of the brain via the optic nerve tracts and radiations. The retinal architecture is lamellar. Within this there are major types performing sensory nutritional regulatory immunomodulatory and structure and functions. The retina is uniquely partitioned from the vascular system by the blood retinal barrier and blood aqueous barrier. The blood supply is dual to the inner retina it is by the retinal circulation lying within the in a retina and to the outer retina it is by the choroidal circulation, Hrithik vascular layer lying outside of the retinal pigment epithelium. The retinal pigment epithelium and the choroid are critical to retinal function. Is the eye is imagined to be a camera in the retina is the film. Just like a picture cannot be developed if the camera has defective film, vision is not possible in an eye with a defective retina.&lt;/p>
&lt;p>If caught early then diabetic retinopathy can be treated, otherwise it can lead to irreversible blindness. Unluckily, medical specialists capable of detecting the disease are not available in many parts of the world where diabetes is prevalent. Deep neural networks have helped in solving many such problems in the recent past. Medical image classification has been done accurately using deep neural networks and thus, we will be using this in our project. The aim of this project is to use deep learning to help doctors identify the patients in need, particularly among underserved populations.&lt;/p>
&lt;p>Prolonged diabetes leads to DR, where the retina is damaged due to fluid leaking from the blood vessels. Usually, the stage of DR is judged based on blood vessels, exudes, hemorrhages, microaneurysms and texture. In this paper, we have discussed different methods for features extraction and automatic DR stage detection. An ophthalmologist uses an ophthalmoscope to visualize the blood vessels and his or her brain to detect the DR stages. Recently digital imaging became available as a tool for DR screening. It provides high quality permanent records of the retinal appearance, which can be used for monitoring of progression or response to treatment, and which can be reviewed by an ophthalmologist, digital images have the potential to be processed by automatic analysis systems. A combination of both accurate and early diagnosis as well as correct application of treatment can prevent blindness caused by DR in more than 50% of all cases. Therefore, regular screenings for DR of patients with diabetes is important. The grading of the resultant fundus images is an important cost factor. Automated DR detection can reduce the grading cost and thereby make the whole screening process less expensive. Some of the algorithms and systems reviewed in this paper are close to achieve DR identification in clinical practice.&lt;/p></description></item><item><title>Piezoelectric Transducer and Arduino Based Wirelessly Controlled Energy Saving Scheme for Street Lights</title><link>https://somnathrakshit.github.io/project/energy-saving-scheme-street-lights/</link><pubDate>Mon, 19 Mar 2018 03:19:01 +0530</pubDate><guid>https://somnathrakshit.github.io/project/energy-saving-scheme-street-lights/</guid><description>&lt;p>Today, a large amount of energy is wasted on continuously lighting street lights. In this paper, a scheme has been proposed to automatically control street lights using Arduino microcontroller and switch on lights only when an activity is observed in the road. Also, a scheme has been discussed to generate power and run our automated model using Piezoelectric transducers. Additionally, it is shown how this system can be used for other purposes like traffic monitoring, weather monitoring and fault checking.&lt;/p>
&lt;p>From the proposed system, the developing countries can be more efficient with their electrical energy as well as the maintenance cost of power lines for street lights. It also reduces the manual work to zero. Automatic Smart Light System is a very user friendly approach and the usage of this smart light system will help in saving large amount of power in the world.&lt;/p></description></item><item><title>Identifying Land Patterns from Satellite Imagery in Amazon Rainforest using Deep Learning</title><link>https://somnathrakshit.github.io/project/identify-land-pattern-keras/</link><pubDate>Tue, 27 Feb 2018 23:52:39 +0530</pubDate><guid>https://somnathrakshit.github.io/project/identify-land-pattern-keras/</guid><description>&lt;p>The Amazon rainforests have been suffering widespread damage, both via natural and artificial means. Every minute, it is estimated that the world loses forest cover the size of 48 football fields. Deforestation in the Amazon rainforest has led to drastically reduced biodiversity, loss of habitat, climate change and other biological losses. In this respect, it has become essential to track how the nature of these forests change over time. Image classification using deep learning can help speed up this process by removing the manual task of classifying each image. Here, it is shown how convolutional neural networks can be used to track changes in land patterns in the Amazon rainforests. In this work, a testing accuracy of 96.71% was obtained. This can help governments and other agencies to track changes in land patterns more effectively and accurately.&lt;/p>
&lt;p>
&lt;a href="https://gist.github.com/somnathrakshit/334297f8ab77aa6739d97284d16addd9" target="_blank" rel="noopener">Code,&lt;/a>
&lt;a href="https://somnathrakshit.github.io/files/download/ICNDE.pdf">Poster&lt;/a>.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/somnathrakshit/334297f8ab77aa6739d97284d16addd9.js">&lt;/script></description></item><item><title>Prediction of Diabetes Type-II Using a Two-Class Neural Network</title><link>https://somnathrakshit.github.io/publication/pima-indians-diabetes/</link><pubDate>Fri, 24 Mar 2017 01:42:49 +0530</pubDate><guid>https://somnathrakshit.github.io/publication/pima-indians-diabetes/</guid><description/></item></channel></rss>