<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Somnath Rakshit's personal website on Somnath Rakshit</title><link>https://somnath.pages.dev/</link><description>Recent content in Somnath Rakshit's personal website on Somnath Rakshit</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 15 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://somnath.pages.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>My Git Command Collection</title><link>https://somnath.pages.dev/musings/git_commands/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>https://somnath.pages.dev/musings/git_commands/</guid><description>My Git Command Collection Like many other people, I tend to be frustrated often trying to find the right command while using Git. This document is an attempt to collect as many useful commands from various places on the internet to make commands easier to find in a single location.
Before You Begin It is always a good idea to take a backup of your entire working directory including .git before you attempt anything mentioned here.</description></item><item><title>mri-sim-py.epg: A GPU-accelerated Extended Phase Graph Algorithm for differentiable optimization and learning</title><link>https://somnath.pages.dev/projects/project-mri-sim-py-epg/</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><guid>https://somnath.pages.dev/projects/project-mri-sim-py-epg/</guid><description>mri-sim-py.epg: A GPU-accelerated Extended Phase Graph Algorithm for differentiable optimization and learning The Extended Phase Graph Algorithm is a powerful tool for MRI sequence simulation and quantitative fitting, but such simulators are mostly written to run on CPU only and (with some exception) are poorly parallelized. A parallelized simulator compatible with other learning-based frameworks would be a useful tool to optimize scan parameters. Thus, we created an open source, GPU-accelerated EPG simulator in PyTorch.</description></item><item><title>Relevance Prediction from Eye-movements Using Semi-interpretable Convolutional Neural Networks</title><link>https://somnath.pages.dev/projects/relevance-prediction-eye-movement-cnn/</link><pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate><guid>https://somnath.pages.dev/projects/relevance-prediction-eye-movement-cnn/</guid><description>Relevance Prediction from Eye-movements Using Semi-interpretable Convolutional Neural Networks The primary purpose of Information Retrieval (IR) systems is to fetch content which is useful and relevant to people. IR systems have to cater to a variety of users, who may have wildly different mental models of what they consider to be useful and relevant.
Neuro-physiological methods, such as eye-tracking, provide an interesting avenue to observe users while they interact with information systems.</description></item><item><title>Answerability Classification Using Hand-Crafted Features</title><link>https://somnath.pages.dev/projects/project-answerability/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate><guid>https://somnath.pages.dev/projects/project-answerability/</guid><description>Answerability Classification Using Hand-Crafted Features In this project, I competed with the members in my class on a challenge to predict whether a visual question is answerable or not by using a given image and an associated question in the form of a text. For this task, we were required to create a multi-modal (computer vision + natural language processing) classification system.
First, Microsoft Azure Vision API was used to obtain the tags for each image.</description></item><item><title>A Comprehensive Guide to Sorting in Pandas</title><link>https://somnath.pages.dev/musings/sorting_in_pandas/</link><pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate><guid>https://somnath.pages.dev/musings/sorting_in_pandas/</guid><description>A Comprehensive Guide to Sorting in Pandas In order to sort rows in Pandas, you can use the sort_values() function. I have taken examples from this excellant blog. Although it shows a lot of the use cases covered here, the last case is absent pretty much everywhere.
In this tutorial, I will be showing how to use Pandas to sort rows based on different criterion.
You can run a colab notebook containing all code present in this post by clicking here.</description></item><item><title>geograpy3</title><link>https://somnath.pages.dev/projects/project-geograpy3/</link><pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate><guid>https://somnath.pages.dev/projects/project-geograpy3/</guid><description>geograpy3 geograpy3 extracts place names from a URL or text, and adds context to those names &amp;ndash; for example distinguishing between a country, region or city. It is a fork of Geograpy2, which is itself a fork of geograpy and inherits most of it, but solves several problems (such as support for utf8, places names with multiple words, confusion over homonyms etc). Also, geograpy3 is compatible with Python 3.6+, unlike Geography2.</description></item><item><title>Contact</title><link>https://somnath.pages.dev/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://somnath.pages.dev/contact/</guid><description> Email: firstname at utexas dot edu Mailing Address UTA 5.410,
1616, Guadalupe St
Austin, TX 78741
United States of America</description></item></channel></rss>