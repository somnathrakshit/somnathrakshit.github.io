<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python | Somnath Rakshit</title><link>https://somnathrakshit.github.io/tags/python/</link><atom:link href="https://somnathrakshit.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><description>python</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Somnath Rakshit, 2020</copyright><lastBuildDate>Sat, 01 Jun 2019 12:52:56 +0200</lastBuildDate><image><url>https://somnathrakshit.github.io/img/avatar.jpg</url><title>python</title><link>https://somnathrakshit.github.io/tags/python/</link></image><item><title>A Comprehensive Guide to Sorting in Pandas</title><link>https://somnathrakshit.github.io/post/sorting_in_pandas/</link><pubDate>Sat, 01 Jun 2019 12:52:56 +0200</pubDate><guid>https://somnathrakshit.github.io/post/sorting_in_pandas/</guid><description>&lt;p>In order to sort rows in &lt;code>Pandas&lt;/code>, you can use the &lt;code>sort_values()&lt;/code> function. I have taken examples from this excellant
&lt;a href="https://datatofish.com/sort-pandas-dataframe/" target="_blank" rel="noopener">blog&lt;/a>. Although it shows a lot of the use cases covered here, the last case is absent pretty much everywhere.&lt;/p>
&lt;p>In this tutorial, I will be showing how to use &lt;code>Pandas&lt;/code> to sort rows based on different criterion.&lt;/p>
&lt;h2>Table of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#column-in-an-ascending-order">Column in an ascending order&lt;/a>&lt;/li>
&lt;li>&lt;a href="#column-in-an-descending-order">Column in an descending order&lt;/a>&lt;/li>
&lt;li>&lt;a href="#by-multiple-columns---same-data-type">By multiple columns - Same data type&lt;/a>&lt;/li>
&lt;li>&lt;a href="#by-multiple-columns---mixed-data-type">By multiple columns - Mixed data type&lt;/a>&lt;/li>
&lt;li>&lt;a href="#by-multiple-columns-and-mixed-order">By multiple columns and mixed order&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;p>You can run a colab notebook containing all code present in this post by clicking here.
&lt;a href="https://colab.research.google.com/gist/somnathrakshit/88a4684a1eb97b782b07a2f758ad3e3c/pandas_sort.ipynb" target="_parent">&lt;img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/>&lt;/a>&lt;/p>
&lt;p>Let us create our &lt;code>DataFrame&lt;/code> (df) in pandas&lt;/p>
&lt;pre>&lt;code>from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000, 25000, 27000, 35000],
'Year': [2015, 2013, 2018, 2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="column-in-an-ascending-order">Column in an ascending order&lt;/h2>
&lt;p>To sort this df based on the column &lt;code>Brand&lt;/code>, we can use the &lt;code>sort_values()&lt;/code> function in this manner. Here, &lt;code>inplace=True&lt;/code> means that the df will be sorted in-memory. Also, by default, the &lt;code>df&lt;/code> is sorted in ascending order. But we can change it easily, as will be shown later.&lt;/p>
&lt;pre>&lt;code>df.sort_values(by=['Brand'], inplace=True)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;p>The complete code to perform the task above is shown below.&lt;/p>
&lt;pre>&lt;code>from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort Brand - ascending order
df.sort_values(by=['Brand'], inplace=True)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="column-in-an-descending-order">Column in an descending order&lt;/h2>
&lt;p>Now, suppose we would like to sort df in descending order. Well, &lt;code>sort_values()&lt;/code> accepts a paramter named &lt;code>ascending&lt;/code>. By passing &lt;code>ascending=True&lt;/code>, you can sort the df in descending order. The code is given below.&lt;/p>
&lt;pre>&lt;code>df.sort_values(by=['Brand'], inplace=True, ascending=False)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code># sort - descending order
from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort Brand - descending order
df.sort_values(by=['Brand'], inplace=True, ascending=False)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="by-multiple-columns---same-data-type">By multiple columns - Same data type&lt;/h2>
&lt;p>In the next step, we would like to sort based on two columns. So, here, we first sort by &lt;code>Year&lt;/code> and then by the &lt;code>Price&lt;/code> of the car. &lt;code>sort_values()&lt;/code> accepts a parameter called by. The by paramters can accept a string literal or it can accept a list. We simply need to pass the list containing the columns by which we want the df to be sorted. This is shown below.&lt;/p>
&lt;pre>&lt;code> df.sort_values(by=['Year','Price'], inplace=True)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code># sort by multiple columns
from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort by multiple columns: Year and Price
df.sort_values(by=['Year','Price'], inplace=True)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="by-multiple-columns---mixed-data-type">By multiple columns - Mixed data type&lt;/h2>
&lt;p>It is also possible to pass mixed type of columns to be sorted. For example, we can pass the &lt;code>Year&lt;/code> column (integer) and the &lt;code>Brand&lt;/code> column (string). Pandas accepts this without any problem.&lt;/p>
&lt;pre>&lt;code>df.sort_values(by=['Year','Brand'], inplace=True)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code># sort by multiple columns
from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort by multiple columns: Year and Brand
df.sort_values(by=['Year','Brand'], inplace=True)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="by-multiple-columns-and-mixed-order">By multiple columns and mixed order&lt;/h2>
&lt;p>Last but not the least, it is also possible to sort multiple columns in mixed order. For example, we may want to sort by &lt;code>Year&lt;/code> and &lt;code>Brand&lt;/code> where the &lt;code>Year&lt;/code> column needs to be sorted in descending order whereas the &lt;code>Brand&lt;/code> column needs to be sorted in ascening order. Pandas performs this by accepting list in addition to a boolean variable to the &lt;code>ascending&lt;/code> parameter. The correct intuitive way of doing this is shown below.&lt;/p>
&lt;pre>&lt;code>df.sort_values(by=['Year','Brand'], ascending=[False, True], inplace=True)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code># sort by multiple columns but different order
from pandas import DataFrame
Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
'Price': [22000,25000,27000,35000],
'Year': [2015,2013,2018,2018]
}
df = DataFrame(Cars, columns= ['Brand', 'Price','Year'])
# sort by multiple columns: Year and Brand
df.sort_values(by=['Year','Brand'], ascending=[False, True], inplace=True)
df
&lt;/code>&lt;/pre>
&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;p>You can know more about sorting in Pandas by visiting the
&lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sort_values.html" target="_blank" rel="noopener">official documentation&lt;/a>.&lt;/p></description></item><item><title>Identification of Four miRNAs by Analysing Multi-View miRNA-seq Data of Stomach Cancer</title><link>https://somnathrakshit.github.io/publication/identify-four-mirnas-stad-tensymp-2019/</link><pubDate>Sat, 20 Apr 2019 11:01:12 +0200</pubDate><guid>https://somnathrakshit.github.io/publication/identify-four-mirnas-stad-tensymp-2019/</guid><description/></item><item><title>geograpy3</title><link>https://somnathrakshit.github.io/project/geograpy3/</link><pubDate>Tue, 25 Sep 2018 02:42:18 +0530</pubDate><guid>https://somnathrakshit.github.io/project/geograpy3/</guid><description>&lt;p>geograpy3 is a fork of
&lt;a href="https://github.com/Corollarium/geograpy2" target="_blank" rel="noopener">Geograpy2&lt;/a>, which is itself a fork of
&lt;a href="https://github.com/ushahidi/geograpy" target="_blank" rel="noopener">geograpy&lt;/a> and inherits most of it, but solves several problems (such as support for utf8, places names with multiple words, confusion over homonyms etc). Also, geograpy3 is compatible with Python 3, unlike Geography2.&lt;/p>
&lt;p>This is installable from PyPi by running the following command.&lt;/p>
&lt;p>&lt;code>pip install geograpy3&lt;/code>&lt;/p></description></item></channel></rss>