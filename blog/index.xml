<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My (in)frequent musings on Somnath Rakshit</title><link>/blog/</link><description>Recent content in My (in)frequent musings on Somnath Rakshit</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Install Mastodon using Docker on Linux and expose instance using Cloudflare Tunnels</title><link>/blog/install_mastodon/</link><pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate><guid>/blog/install_mastodon/</guid><description>This post is about the following:
Setup Cloudflare Tunnels to access your website publicly without the risks of opening ports on your router. Install Docker and Docker-Compose on Linux. Install Postgres database using Docker. Install Mastodon on Docker Setup Cloudflare Tunnels I have another post on how to setup Cloudflare Tunnels on Linux. Please follow those steps and then return here. Make sure you use port 3000 instead of port 80 as shown in the example config.</description><content>&lt;p>This post is about the following:&lt;/p>
&lt;ol>
&lt;li>Setup Cloudflare Tunnels to access your website publicly without the risks of opening ports on your router.&lt;/li>
&lt;li>Install Docker and Docker-Compose on Linux.&lt;/li>
&lt;li>Install Postgres database using Docker.&lt;/li>
&lt;li>Install Mastodon on Docker&lt;/li>
&lt;/ol>
&lt;h1 id="setup-cloudflare-tunnels">Setup Cloudflare Tunnels&lt;/h1>
&lt;p>I have &lt;a href="/blog/install_cloudflared/">another post&lt;/a> on how to setup Cloudflare Tunnels on Linux. Please follow those steps and then return here. Make sure you use port &lt;code>3000&lt;/code> instead of port &lt;code>80&lt;/code> as shown in the example &lt;code>config.yml&lt;/code> file.&lt;/p>
&lt;h1 id="install-docker-and-docker-compose">Install Docker and Docker-Compose&lt;/h1>
&lt;p>The easiest way to install docker and docker-compose on Linux is to run these commands on your terminal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get update &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> sudo apt-get upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docker provides an automated script that will install docker for you. Beware, always study the script before running it. To study the script, replace &lt;code>sh&lt;/code> by &lt;code>cat&lt;/code> in the below command. To run this script, use the below command, unchanged.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -fsSL test.docker.com -o get-docker.sh &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> sh get-docker.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After installing, you may want to add a non-root user to the docker user group so that you can run docker commands without using &lt;code>sudo&lt;/code> or logging in as root. The syntax for adding users to the Docker group is:
&lt;code>sudo usermod -aG docker [user_name]&lt;/code>. To add current user to docker group, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo usermod -aG docker &lt;span style="color:#e6db74">${&lt;/span>USER&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, log out of the server with the following command to allow this chage to take effect:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>exit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Log back in and run these commands to install docker-compose.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get install -y libffi-dev libssl-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt install -y python3-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install -y python3 python3-pip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo pip3 install docker-compose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, enable the Docker system service to start your containers on boot. This is a very nice and important addition. With the following command you can configure your Raspberry Pi to automatically run the Docker system service, whenever it boots up.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo systemctl enable docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The best way to test whether Docker has been set up correctly is to run the Hello World container.
To do so, type in the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run hello-world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once it goes through all the steps, the output should inform you that your installation appears to be working correctly.&lt;/p>
&lt;h1 id="install-postgres-using-docker">Install Postgres using Docker&lt;/h1>
&lt;p>Run the commands below to install PostgreSQL using docker.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull postgres
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run --name postgresql -e POSTGRES_USER&lt;span style="color:#f92672">=&lt;/span>postgres -e POSTGRES_PASSWORD&lt;span style="color:#f92672">=&lt;/span>YOUR_STRONG_PASSWORD -p 5432:5432 -v /data:/var/lib/postgresql/data -d postgres
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker ps -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output of &lt;code>docker ps -a&lt;/code> should show the name of the container running and the port associated with it.&lt;/p>
&lt;h1 id="install-mastodon-using-docker">Install Mastodon using Docker&lt;/h1>
&lt;p>In order to install Mastodon, let us clone the repo from Github using these commands and create a branch called latest using the latest commit. Then, we will checkout this branch and use it to install Mastodon on our instance.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/mastodon/mastodon.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd mastodon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>latest&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>git describe --tags &lt;span style="color:#e6db74">`&lt;/span>git rev-list --tags --max-count&lt;span style="color:#f92672">=&lt;/span>1&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout $lastest -b &lt;span style="color:#e6db74">${&lt;/span>latest&lt;span style="color:#e6db74">}&lt;/span>-branch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, replace docker-compose.yml file using the contents provided below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">db&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">postgres:14-alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">postgres&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shm_size&lt;/span>: &lt;span style="color:#ae81ff">256mb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">internal_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;CMD&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;pg_isready&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-U&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;postgres&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./postgres14:/var/lib/postgresql/data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;POSTGRES_HOST_AUTH_METHOD=trust&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">redis&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">redis:7-alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">internal_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;CMD&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;redis-cli&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;ping&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./redis:/data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># es:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># restart: always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># environment:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;xpack.license.self_generated.type=basic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;xpack.security.enabled=false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;xpack.watcher.enabled=false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;xpack.graph.enabled=false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;xpack.ml.enabled=false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;bootstrap.memory_lock=true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;cluster.name=es-mastodon&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;discovery.type=single-node&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#34;thread_pool.write.queue_size=1000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># networks:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - external_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - internal_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># healthcheck:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># test: [&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;curl --silent --fail localhost:9200/_cluster/health || exit 1&amp;#34;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># volumes:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - ./elasticsearch:/usr/share/elasticsearch/data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ulimits:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># memlock:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># soft: -1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># hard: -1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># nofile:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># soft: 65536&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># hard: 65536&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ports:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - &amp;#39;127.0.0.1:9200:9200&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">web&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># build: .&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">tootsuite/mastodon:v4.0.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">web&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env_file&lt;/span>: &lt;span style="color:#ae81ff">.env.production&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">bash -c &amp;#34;rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">external_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">internal_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># prettier-ignore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;CMD-SHELL&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wget -q --spider --proxy=off localhost:3000/health || exit 1&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;127.0.0.1:3000:3000&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">db&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - es&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./public/system:/mastodon/public/system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">streaming&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># build: .&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">tootsuite/mastodon:v4.0.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">streaming&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env_file&lt;/span>: &lt;span style="color:#ae81ff">.env.production&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">node ./streaming&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">external_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">internal_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># prettier-ignore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;CMD-SHELL&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;127.0.0.1:4000:4000&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">db&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">sidekiq&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># build: .&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">tootsuite/mastodon:v4.0.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">sidekiq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env_file&lt;/span>: &lt;span style="color:#ae81ff">.env.production&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">bundle exec sidekiq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">db&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">redis&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">external_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">internal_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./public/system:/mastodon/public/system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;CMD-SHELL&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;ps aux | grep &amp;#39;[s]idekiq\ 6&amp;#39; || false&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## Uncomment to enable federation with tor instances along with adding the following ENV variables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## http_proxy=http://privoxy:8118&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># tor:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># image: sirboops/tor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># networks:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - external_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - internal_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># privoxy:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># image: sirboops/privoxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># volumes:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - ./priv-config:/opt/config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># networks:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - external_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># - internal_network&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_network&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">internal_network&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">internal&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You don&amp;rsquo;t need to enable the es instance unless you intend to enable fulltext searching (which is outside the scope of this post). We&amp;rsquo;re almost ready to launch Mastodon&amp;rsquo;s setup utility.&lt;/p>
&lt;p>However, if we simply try and launch setup, Docker will refuse to start the containers because .env.production doesn&amp;rsquo;t exist.&lt;/p>
&lt;p>I had initially just touch&amp;rsquo;d the file (because you won&amp;rsquo;t know what to put in it until after setup is complete), however, doing this leads to setup failing part way through.&lt;/p>
&lt;p>There&amp;rsquo;s a step where the setup script exports environment variables for use by later steps. However, some of those steps execute within a different container and variables exported in one container won&amp;rsquo;t be available to another, so the streaming container fails to connect to Redis (because it tries to connect to the default - localhost rather than the redis container).&lt;/p>
&lt;p>To resolve this, we start by creating .env.production with known connection details (replace the Database password with the correct value)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#e6db74">&amp;lt;&amp;lt; EOM &amp;gt; .env.production
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">DB_HOST=db
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">DB_PORT=5432
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">DB_NAME=mastodon
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">DB_USER=mastodon
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">DB_PASS=&amp;lt;replace&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">REDIS_HOST=redis
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">REDIS_PORT=6379
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">REDIS_PASSWORD=
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOM&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(REDIS_PASSWORD is supposed to have an empty value in the above).&lt;/p>
&lt;p>With this file created, we&amp;rsquo;re ready to fire off the setup process&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose run --rm web bundle exec rake mastodon:setup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will prompt you for some information:&lt;/p>
&lt;pre tabindex="0">&lt;code>Domain name: mastodon.bentasker.co.uk
Single user mode disables registrations and redirects the landing page to your public profile.
Do you want to enable single user mode? No
Are you using Docker to run Mastodon? Yes
PostgreSQL host: db
PostgreSQL port: 5432
Name of PostgreSQL database: postgres
Name of PostgreSQL user: mastodon
Password of PostgreSQL user:
Database configuration works!
Redis host: redis
Redis port: 6379
Redis password:
Redis configuration works!
Do you want to store uploaded files on the cloud? No
Do you want to send e-mails from localhost? No
&lt;/code>&lt;/pre>&lt;p>You&amp;rsquo;ll be prompted for SMTP details.&lt;/p>
&lt;p>Once you&amp;rsquo;ve provided all the necessary information, it&amp;rsquo;ll print a bunch of environment variables&lt;/p>
&lt;pre tabindex="0">&lt;code>LOCAL_DOMAIN=mastodon.bentasker.co.uk
SINGLE_USER_MODE=false
SECRET_KEY_BASE=&amp;lt;redacted&amp;gt;
OTP_SECRET=&amp;lt;redacted&amp;gt;
VAPID_PRIVATE_KEY=&amp;lt;redacted&amp;gt;
VAPID_PUBLIC_KEY=&amp;lt;redacted&amp;gt;
DB_HOST=db
DB_PORT=5432
DB_NAME=mastodon
DB_USER=mastodon
DB_PASS=&amp;lt;redacted&amp;gt;
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=
SMTP_SERVER=&amp;lt;redacted&amp;gt;
SMTP_PORT=587
SMTP_LOGIN=&amp;lt;redacted&amp;gt;
SMTP_PASSWORD=&amp;lt;redacted&amp;gt;
SMTP_AUTH_METHOD=plain
SMTP_OPENSSL_VERIFY_MODE=peer
SMTP_ENABLE_STARTTLS=always
SMTP_FROM_ADDRESS=&amp;lt;redacted&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Take a copy of these, and in another terminal, save them into &lt;code>.env.production&lt;/code> (you can remove the lines added earlier).&lt;/p>
&lt;p>The setup script will ask whether you want to create the admin user, and once that&amp;rsquo;s done will print the initial auto-generated password for this account.&lt;/p>
&lt;pre tabindex="0">&lt;code>Do you want to create an admin user straight away? Yes
Username: admin
E-mail: &amp;lt;redacted&amp;gt;
You can login with the password: &amp;lt;redacted&amp;gt;
You can change your password once you login.
&lt;/code>&lt;/pre>&lt;p>The initial setup is now complete, and the container should exit.&lt;/p>
&lt;p>If the process failed for some reason, once you&amp;rsquo;ve figured out what you need to correct, you can&amp;rsquo;t just re-run the setup script: you&amp;rsquo;ll need to add the following to &lt;code>.env.production&lt;/code> first&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Don&amp;#39;t add this unless your initial setup failed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DISABLE_DATABASE_ENVIRONMENT_CHECK&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On your re-run, when it asks you if you want to proceed with destroying the database, choose &lt;code>Yes&lt;/code> (otherwise you&amp;rsquo;ll run into key constraints when it tries to create the admin user).&lt;/p>
&lt;p>We now want to briefly run the containers. This will cause the volume directories to be created on disk so that we can set permissions appropriately (reducing risk if something else gets compromised)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose up -d &lt;span style="color:#75715e"># will take a bit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose down
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Fix permissions&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo chown -R 70:70 postgres
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown -R 991:991 public/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s time to bring the containers up&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The system is now up and running: the web container will be listening on the loopback interface for port 3000, and streaming is on 4000.&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://dev.to/elalemanyo/how-to-install-docker-and-docker-compose-on-raspberry-pi-1mo">https://dev.to/elalemanyo/how-to-install-docker-and-docker-compose-on-raspberry-pi-1mo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hevodata.com/learn/docker-postgresql/">https://hevodata.com/learn/docker-postgresql/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bentasker.co.uk/posts/blog/general/running-mastodon-in-docker-compose.html">https://www.bentasker.co.uk/posts/blog/general/running-mastodon-in-docker-compose.html&lt;/a>&lt;/li>
&lt;/ol></content></item><item><title>Install cloudflared to set up secure Cloudflare Tunnels for free</title><link>/blog/install_cloudflared/</link><pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate><guid>/blog/install_cloudflared/</guid><description>I have been using Cloudflare Tunnels increasingly over the last year to securely enable my applications to be reached publicly without having to open firewall ports in my server. However, installing cloudflared and then setting up tunnels is not very straightforward. So, I wanted to develop this tutorial as a way to get tunnels up and running quickly. These steps are tested on Ubuntu 22.04.
Step 1: Install cloudflared Let us create env variables first.</description><content>&lt;p>I have been using Cloudflare Tunnels increasingly over the last year to securely enable my applications to be reached publicly without having to open firewall ports in my server. However, installing cloudflared and then setting up tunnels is not very straightforward. So, I wanted to develop this tutorial as a way to get tunnels up and running quickly. These steps are tested on Ubuntu 22.04.&lt;/p>
&lt;h2 id="step-1-install-cloudflared">Step 1: Install cloudflared&lt;/h2>
&lt;p>Let us create env variables first.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>NAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;tunnelname&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HOSTNAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;subdomain.domain.tld&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, let us install cloudflared using their package. The commands below are specifically for Ubuntu 22.04. You can find instructions for other operating systems &lt;a href="https://pkg.cloudflare.com/">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Add cloudflare gpg key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mkdir -p --mode&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0755&lt;/span> /usr/share/keyrings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg &amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Add this repo to your apt repositories&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#39;deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared jammy main&amp;#39;&lt;/span> | sudo tee /etc/apt/sources.list.d/cloudflared.list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># install cloudflared&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> sudo apt-get install cloudflared
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will install &lt;code>cloudflared&lt;/code>.&lt;/p>
&lt;h2 id="step-2-authenticate-cloudflared">Step 2: Authenticate cloudflared&lt;/h2>
&lt;p>Let us login and authenticate the cloudflared daemon to our account.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cloudflared login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running the above command will launch the default browser window and prompt you to login to your Cloudflare account. Then, you will be prompted to select a site, which we have created previously. As soon as you have chosen your hostname, Cloudflare will download a certificate file to authenticate &lt;code>cloudflared&lt;/code> with Cloudflare&amp;rsquo;s network. Once authorization is completed successfully, your cert.pem will be download to the default directory. If you&amp;rsquo;re running a headless server (no monitor or keyboard), you could copy the authentication URL and paste it in a browser manually.&lt;/p>
&lt;h2 id="step-3-create-a-cloudflare-tunnel">Step 3: Create a Cloudflare Tunnel&lt;/h2>
&lt;p>Now, we are ready to create a Cloudflare Tunnel that will connect &lt;code>cloudflared&lt;/code> to Cloudflare&amp;rsquo;s edge. Running the following command will create a Tunnel with tht name and generate an ID credentials file for it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cloudflared tunnel create $NAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the Tunnel is created, a credential file is generated. It&amp;rsquo;s a JSON file that has the Universally Unique Identifier (UUID) assigned for the Tunnel.&lt;/p>
&lt;p>&lt;em>Note: although the Tunnel is created, the connection is not established yet.&lt;/em>&lt;/p>
&lt;h2 id="step-4-configure-the-tunnel-details">Step 4: Configure the Tunnel details&lt;/h2>
&lt;p>Cloudflare utilizes a configuration file to determine how to route traffic. The configuration file contains keys and values, which is written in YAML syntax. You may need to modify the following keys and values to meet your configuration file requirements. By default, on Linux systems, Tunnel expects to find the configuration file in &lt;code>~/.cloudflared&lt;/code>, &lt;code>/etc/cloudflared&lt;/code> and &lt;code>/usr/local/etc/cloudflared&lt;/code> in that order.
Let&amp;rsquo;s create our config file and save in the default expected directory for this tutorial.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo nano ~/.cloudflared/config.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we will paste our keys and values as shown below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>tunnel: 1082b601-bce9-45e4-b6ae-f19020e7d071
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>credentials-file: /root/.cloudflared/1082b601-bce9-45e4-b6ae-f19020e7d071.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ingress:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> hostname: test.mytunnel.ml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> service: http://localhost:80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> service: http_status:404
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-5-create-dns-records-to-route-traffic-to-the-tunnel">Step 5: Create DNS records to route traffic to the Tunnel&lt;/h2>
&lt;p>Run the following command from the command line. This command will generate a CNAME record that points to the subdomain of a specific Tunnel. The result is the same as creating a CNAME record from the dashboard.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cloudflared tunnel route dns $NAME $HOSTNAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Note: unlike the previous Argo Tunnel architecture, this DNS record will not be deleted if the Tunnel disconnects.&lt;/em>&lt;/p>
&lt;h2 id="step-6-run-and-manage-the-tunnel">Step 6: Run and manage the Tunnel&lt;/h2>
&lt;p>The &lt;code>run&lt;/code> command will connect cloudflared to Cloudflare&amp;rsquo;s edge network using the configuration created in step 4. We will not specify a configuration file location so Cloudflared retrieves it from the default location, which is &lt;code>~/.cloudflared/config.yml&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cloudflared tunnel run $NAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-7-run-tunnel-as-a-service">Step 7: Run Tunnel as a service&lt;/h2>
&lt;p>By running the following command, the tunnel can be installed as a system service which allows the tunnel to run at boot automatically as launch daemon. By default, the tunnel expects to find the configuration file in the default directory, &lt;code>~/.cloudflared/config.yml&lt;/code> but to run tunnel as a service, we might need to move the &lt;code>config.yml&lt;/code> file to &lt;code>/etc/cloudflared/&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo mkdir -p /etc/cloudflared/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mv ~/.cloudflared/config.yml /etc/cloudflared/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, we are ready to run Tunnel as a service utilizing the command below&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo cloudflared service install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="references">References&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://dev.to/omarcloud20/a-free-cloudflare-tunnel-running-on-a-raspberry-pi-1jid">https://dev.to/omarcloud20/a-free-cloudflare-tunnel-running-on-a-raspberry-pi-1jid&lt;/a>&lt;/li>
&lt;/ol></content></item><item><title>Create a PostgreSQL server and expose it remotely using Lets Encrypt</title><link>/blog/postgres-expose/</link><pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate><guid>/blog/postgres-expose/</guid><description>I have been trying for some days to create a PostgreSQL server and expose it on the web so that it can be accessed by external clients. This is useful to me for hosting several personal projects that require a database.
First things first, let&amp;rsquo;s create our env variables.
HOSTNAME=&amp;#34;subdomain.domain.tld&amp;#34; # Hostname of your server EMAIL=&amp;#34;email@email.com&amp;#34; # Used for Let&amp;#39;s Encrypt certificate VERSION=&amp;#34;14&amp;#34; # PostgreSQL version NAME=&amp;#34;db&amp;#34; # Database name Let&amp;rsquo;s update our packages now.</description><content>&lt;p>I have been trying for some days to create a PostgreSQL server and expose it on the web so that it can be accessed by external clients. This is useful to me for hosting several personal projects that require a database.&lt;/p>
&lt;p>First things first, let&amp;rsquo;s create our env variables.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>HOSTNAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;subdomain.domain.tld&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Hostname of your server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EMAIL&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;email@email.com&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Used for Let&amp;#39;s Encrypt certificate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VERSION&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;14&amp;#34;&lt;/span> &lt;span style="color:#75715e"># PostgreSQL version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;db&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Database name&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s update our packages now.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt install postgresql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, we will use &lt;code>nano&lt;/code> to edit PostgreSQL config file and set &lt;code>listen_addresses = '*'&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo nano /etc/postgresql/$VERSION/main/postgresql.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># In this file, add the following line somewhere under the &amp;#34;CONNECTIONS AND AUTHENTICATION&amp;#34; section. &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This will instruct PostgreSQL to listen on all network interfaces for incoming connections.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># listen_addresses = &amp;#39;*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, restart PostgreSQL for the config changes to take place. Then, add firewall configs as below. This will make your server reachable from anywhere (&lt;code>0.0.0.0/0&lt;/code>) and opens ports &lt;code>5432&lt;/code> and &lt;code>80&lt;/code> to accept incoming traffic. You need to open port &lt;code>80&lt;/code> in order to set up SSL certificates with Let&amp;rsquo;s Encrypt.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo systemctl restart postgresql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo bash -c &lt;span style="color:#e6db74">&amp;#34;echo host all all 0.0.0.0/0 md5 &amp;gt;&amp;gt; /etc/postgresql/&amp;#34;&lt;/span>$VERSION&lt;span style="color:#e6db74">&amp;#34;4/main/pg_hba.conf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo iptables -I INPUT &lt;span style="color:#ae81ff">6&lt;/span> -m state --state NEW -p tcp --dport &lt;span style="color:#ae81ff">5432&lt;/span> -j ACCEPT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo iptables -I INPUT &lt;span style="color:#ae81ff">6&lt;/span> -m state --state NEW -p tcp --dport &lt;span style="color:#ae81ff">80&lt;/span> -j ACCEPT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo netfilter-persistent save
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let us now set up SSL certificates using Let&amp;rsquo;s Encrypt. This will also accept their terms and conditions automatically.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-cache policy certbot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get -y install certbot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo certbot certonly --standalone -d $HOSTNAME --staple-ocsp -m $EMAIL --agree-tos
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Having set up our SSL certificates, we now need to instruct PostgreSQL to use them to transfer data securely instead of transferring data without encryption. Edit the configuration file at &lt;code>/etc/postgresql/$VERSION/main/postgresql.conf&lt;/code>, where $VERSION is your Postgres version (mine is 14). Find the SSL section, then edit it to enable SSL and specify the locations of the certificate and key.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>ssl = on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssl_cert_file = &amp;#39;/etc/postgresql/$VERSION/main/fullchain.pem&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssl_key_file = &amp;#39;/etc/postgresql/$VERSION/main/privkey.pem&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, copy the certificate files from their original location to the one that you just mentioned.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo cp /etc/letsencrypt/live/$HOSTNAME/fullchain.pem /etc/postgresql/$VERSION/main/fullchain.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo cp /etc/letsencrypt/live/$HOSTNAME/privkey.pem /etc/postgresql/$VERSION/main/privkey.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chmod &lt;span style="color:#ae81ff">600&lt;/span> /etc/postgresql/$VERSION/main/fullchain.pem /etc/postgresql/$VERSION/main/privkey.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown postgres:postgres /etc/postgresql/$VERSION/main/fullchain.pem /etc/postgresql/$VERSION/main/privkey.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl restart postgresql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember that these SSL certificates are valid for 90 days and should be updated every 60 days. One way of automating this process is by using &lt;code>cron&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>crontab -e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now go to the last line and paste the text given below. Make sure to replace $HOSTNAME and $VERSION with their actual values before saving. This command may look messy but it gets the job done.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>02 08 &lt;span style="font-style:italic">* *&lt;/span> * /opt/certbot/bin/certbot renew --post-hook &amp;#34;sudo cp /etc/letsencrypt/live/$HOSTNAME/fullchain.pem /etc/postgresql/$VERSION/main/fullchain.pem &lt;span style="color:#960050;background-color:#1e0010">&amp;amp;&amp;amp;&lt;/span> sudo cp /etc/letsencrypt/live/$HOSTNAME/privkey.pem /etc/postgresql/$VERSION/main/privkey.pem &lt;span style="color:#960050;background-color:#1e0010">&amp;amp;&amp;amp;&lt;/span> sudo chmod 600 /etc/postgresql/$VERSION/main/fullchain.pem /etc/postgresql/$VERSION/main/privkey.pem &lt;span style="color:#960050;background-color:#1e0010">&amp;amp;&amp;amp;&lt;/span> sudo chown postgres:postgres /etc/postgresql/$VERSION/main/fullchain.pem /etc/postgresql/$VERSION/main/privkey.pem &lt;span style="color:#960050;background-color:#1e0010">&amp;amp;&amp;amp;&lt;/span> sudo systemctl restart postgresql&amp;#34; --quiet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it, we should be able to create test database now.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo -u postgres psql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Within the SQL prompt, use the following query to create a database now. Make sure that you use a long (more than 20 characters with uppercase, lowercase, digits, and special characters included) and strong password since your database is exposed to the public and is vulnerable against attacks.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">create&lt;/span> &lt;span style="color:#66d9ef">database&lt;/span> mydb;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">create&lt;/span> &lt;span style="color:#66d9ef">user&lt;/span> myuser &lt;span style="color:#66d9ef">with&lt;/span> &lt;span style="color:#66d9ef">encrypted&lt;/span> password &lt;span style="color:#e6db74">&amp;#39;mypass&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">grant&lt;/span> &lt;span style="color:#66d9ef">all&lt;/span> &lt;span style="color:#66d9ef">privileges&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span> &lt;span style="color:#66d9ef">database&lt;/span> mydb &lt;span style="color:#66d9ef">to&lt;/span> myuser;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let us reboot our server now to make sure everything works well.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To verify if your connections are using SSL, run the following SQL query.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> ssl.pid, usename, datname, ssl, ssl.&lt;span style="color:#66d9ef">version&lt;/span>, ssl.cipher, ssl.bits, client_addr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> pg_catalog.pg_stat_ssl ssl, pg_catalog.pg_stat_activity activity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WHERE&lt;/span> ssl.pid &lt;span style="color:#f92672">=&lt;/span> activity.pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">LIMIT&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it! You can now run your own PostgreSQL instance on the web.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://linuxconfig.org/ubuntu-22-04-postgresql-installation">https://linuxconfig.org/ubuntu-22-04-postgresql-installation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.learnitguide.net/2022/04/install-certbot-on-ubuntu.html">https://www.learnitguide.net/2022/04/install-certbot-on-ubuntu.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.min.io/docs/generate-let-s-encypt-certificate-using-concert-for-minio.html">https://docs.min.io/docs/generate-let-s-encypt-certificate-using-concert-for-minio.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://loganmarchione.com/2020/10/securing-postgres-connections-using-lets-encrypt-certificates/">https://loganmarchione.com/2020/10/securing-postgres-connections-using-lets-encrypt-certificates/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/coding-blocks/creating-user-database-and-adding-access-on-postgresql-8bfcd2f4a91e">https://medium.com/coding-blocks/creating-user-database-and-adding-access-on-postgresql-8bfcd2f4a91e&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>All commands are available on this Github Gist.&lt;/p>
&lt;script src="https://gist.github.com/somnathrakshit/4d4cd4c19f13013075164490dc4b6827.js">&lt;/script></content></item><item><title>My Git Command Collection</title><link>/blog/git_commands/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/git_commands/</guid><description>Like many other people, I tend to be frustrated often trying to find the right command while using Git. This document is an attempt to collect as many useful commands from various places on the internet to make commands easier to find in a single location. I used some excellant resources such as this while creating this.
Before You Begin It is always a good idea to take a backup of your entire working directory including .</description><content>&lt;p>Like many other people, I tend to be frustrated often trying to find the right command while using Git. This document is an attempt to collect as many useful commands from various places on the internet to make commands easier to find in a single location. I used some excellant resources such as &lt;a href="https://sethrobertson.github.io/GitFixUm/fixup.html">this&lt;/a> while creating this.&lt;/p>
&lt;h2 id="before-you-begin">Before You Begin&lt;/h2>
&lt;p>It is always a good idea to take a backup of your entire working directory including .git before you attempt anything mentioned here.&lt;/p>
&lt;h2 id="saving-uncommitted-changes">Saving Uncommitted Changes&lt;/h2>
&lt;p>Sometimes, you might work on something before realising that you won&amp;rsquo;t need it at that point of time. If you don&amp;rsquo;t want to delete that work, and instead, save it for some other day, here are some of the things that you can do.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Description&lt;/th>
&lt;th>Command&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Commit them on the local branch&lt;/td>
&lt;td>&lt;code>git commit -am &amp;quot;My descriptive message&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Commit them on another branch, no checkout conflicts.&lt;/td>
&lt;td>&lt;code>git checkout otherbranch &amp;amp;&amp;amp; git commit -am &amp;quot;My descriptive message&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Commit them on another branch, conflicts.&lt;/td>
&lt;td>&lt;code>git stash; git checkout otherbranch; git stash apply; : &amp;quot;resolve conflicts&amp;quot;; git commit -am &amp;quot;My descriptive message&amp;quot;; git stash drop&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Commit them on a new branch.&lt;/td>
&lt;td>&lt;code>git checkout -b newbranch; git commit -am &amp;quot;My descriptive message&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stash them for a rainy day.&lt;/td>
&lt;td>&lt;code>git stash save &amp;quot;my descriptive name&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="how-to-undo-all-uncommitted-changes">How to undo all uncommitted changes&lt;/h2>
&lt;p>So you have not yet committed and you want to undo everything. Well, best practice is for you to stash the changes in case you were mistaken and later decide that you really wanted them after all. &lt;code>git stash save &amp;quot;description of changes&amp;quot;&lt;/code>. You can revisit those stashes later by &lt;code>git stash list&lt;/code> and decide whether to &lt;code>git stash drop&lt;/code> them after some time has past. Please note that untracked and ignored files are not stashed by default. See &lt;code>&amp;quot;--include-untracked&amp;quot;&lt;/code> and &lt;code>&amp;quot;--all&amp;quot;&lt;/code> for stash options to handle those two cases.&lt;/p>
&lt;p>However, perhaps you are confident (or arrogant) enough to know for sure that you will never ever want the uncommitted changes. If so, you can run &lt;code>git reset --hard&lt;/code>, however please be quite aware that this is almost certainly a completely unrecoverable operation. Any changes which are removed here cannot be restored later. This will not delete untracked or ignored files. Those can be deleted with &lt;code>git clean -nd; git clean -ndX&lt;/code> respectively, or &lt;code>git clean -ndx&lt;/code> for both at once. Well, actually those command do not delete the files. They show what files will be deleted. Replace the &lt;code>&amp;quot;n&amp;quot;&lt;/code> in &lt;code>&amp;quot;-nd…&amp;quot;&lt;/code> with &lt;code>&amp;quot;f&amp;quot;&lt;/code> to actually delete the files. Best practice is to ensure you are not deleting what you should not by looking at the moribund filenames first.&lt;/p>
&lt;h2 id="how-to-undo-some-uncommitted-changes">How to undo some uncommitted changes&lt;/h2>
&lt;p>So you have not yet committed and you want to undo some things. Well, &lt;code>git status&lt;/code> will tell you exactly what you need to do. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># On branch master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Changes to be committed:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># (use &amp;#34;git reset HEAD &amp;lt;file&amp;gt;...&amp;#34; to unstage)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># new file: .gitignore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Changes not staged for commit:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># (use &amp;#34;git checkout -- &amp;lt;file&amp;gt;...&amp;#34; to discard changes in working directory)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># modified: A&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Untracked files:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to include in what will be committed)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># C&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, the &lt;code>git checkout&lt;/code> in file mode is a command that cannot be recovered from—the changes which are discarded most probably cannot be recovered. Perhaps you should run &lt;code>git stash save -p &amp;quot;description&amp;quot;&lt;/code> instead, and select the changes you no longer want to be stashed instead of zapping them.&lt;/p>
&lt;h2 id="do-you-have-uncommitted-stuff-in-your-working-directory">Do you have uncommitted stuff in your working directory?&lt;/h2>
&lt;p>So you have committed. However, before we go about fixing or removing whatever is wrong, you should first ensure that any uncommitted changes are safe, by either committing them (&lt;code>git commit&lt;/code>) or by stashing them (&lt;code>git stash save &amp;quot;message&amp;quot;&lt;/code>) or getting rid of them.&lt;/p>
&lt;p>&lt;code>git status&lt;/code> will help you understand whether your working directory is clean or not. It should report nothing for perfect safety (&amp;ldquo;Untracked files&amp;rdquo; only are sometimes safe.)&lt;/p>
&lt;h3 id="discarding-all-local-commits-on-this-branch">Discarding all local commits on this branch&lt;/h3>
&lt;p>In order to discard all local commits on this branch, to make the local branch identical to the &amp;ldquo;upstream&amp;rdquo; of this branch, simply run &lt;code>git reset --hard @{u}&lt;/code>.&lt;/p>
&lt;h3 id="replacing-all-branch-historycontents">Replacing all branch history/contents&lt;/h3>
&lt;p>If instead of discarding all local commits, you can make your branch identical to some other branch, tag, ref, or SHA that exists on your system.&lt;/p>
&lt;p>The first thing you need to do is identify the SHA or ref of the good state of your branch. You can do this by looking at the output of &lt;code>git log --all&lt;/code> or look graphically at &lt;code>gitk --all --date-order&lt;/code>.&lt;/p>
&lt;p>Once you have found the correct state of your branch, you can get to that state by running &lt;code>git reset --hard REF&lt;/code>.
Obviously replace &lt;code>REF&lt;/code> with the reference or SHA you want to get back to.&lt;/p>
&lt;h2 id="removing-the-last-commit">Removing the last commit&lt;/h2>
&lt;p>To remove the last commit from git, you can simply run &lt;code>git reset --hard HEAD^&lt;/code> If you are removing multiple commits from the top, you can run &lt;code>git reset --hard HEAD~2&lt;/code> to remove the last two commits. You can increase the number to remove even more commits.&lt;/p>
&lt;p>If you want to &amp;ldquo;uncommit&amp;rdquo; the commits, but keep the changes around for reworking, remove the &lt;code>--hard&lt;/code>: &lt;code>git reset HEAD^&lt;/code> which will evict the commits from the branch and from the index, but leave the working tree around.&lt;/p>
&lt;p>If you want to save the commits on a new branch name, then run &lt;code>git branch newbranchname&lt;/code> before doing the git reset.&lt;/p>
&lt;h2 id="reworking-the-last-commit">Reworking the last commit&lt;/h2>
&lt;p>WARNING: These techniques should only be used for non-merge commits. If you have a merge commit, you are better off deleting the merge and recreating it.&lt;/p>
&lt;p>If you want to perform significant work on the last commit, you can simply &lt;code>git reset HEAD^&lt;/code>. This will undo the commit (peel it off) and restore the index to the state it was in before that commit, leaving the working directory with the changes uncommitted, and you can fix whatever you need to fix and try again.&lt;/p>
&lt;p>You can do this with multiple (non-merge) commits in a row (using &lt;code>HEAD^^&lt;/code> or similar techniques), but then of course you lose the separation between the commits and are left with an undifferentiated working directory. If you are trying to squash all of the commits together, or rework which bits are in which commits, this may be what you want.&lt;/p>
&lt;h2 id="moving-a-commit-from-one-branch-to-another">Moving a commit from one branch to another&lt;/h2>
&lt;p>So, you have a commit which is in the wrong place and you want to move it from one branch to another. In order to do this, you will need to know the SHA of the first and last commit (in a continuous series of commits) you want to move (those values are the same if you are moving only one commit), the name of the branch you are moving the commit from, and the name of the branch you are moving the commit to. In the example below, I will name these four values &lt;code>$first&lt;/code>, &lt;code>$last&lt;/code>, &lt;code>$source&lt;/code>, and &lt;code>$destination&lt;/code> (respectively). Additionally, you will need to use a nonce branch as a placeholder. I will call the nonce branch &lt;code>nonce&lt;/code> in the following example. However, you may use any branch name that is not currently in use. You can delete it immediately after you are done.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git branch nonce $last
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git rebase -p --onto $destination $first^ nonce
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember that when you substitute &lt;code>$first&lt;/code> in the command above, leave the &lt;code>^&lt;/code> alone, it is literal.&lt;/p>
&lt;p>Use &lt;code>gitk --all --date-order&lt;/code> to check to make sure the move looks correct (pretending that nonce is the destination branch). Please check very carefully if you were trying to move a merge, it may have been recreated improperly. If you don&amp;rsquo;t like the result, you may delete the nonce branch (&lt;code>git branch -D nonce&lt;/code>) and try again.&lt;/p>
&lt;p>However, if everything looks good, we can move the actual destination branch pointer to where nonce is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git checkout $destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git reset --hard nonce
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git branch -d nonce
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you double-checked with &lt;code>gitk --all --date-order&lt;/code>, you would see that the destination branch looks correct. However, the commits are still on the source branch as well. We can get rid of those now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git rebase -p --onto $first^ $last $source
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using &lt;code>gitk --all --date-order&lt;/code> one last time, you should now see that the commits on the source branch have gone away. You have successfully moved the commits. Please check very carefully if merges occurred after the commits which were deleted. They may have been recreated incorrectly. If so you can either undo the delete or try to delete the bad merge and try to recreate it manually, or create a fake (&amp;ndash;ours) merge from the same SHA so that git is aware that the merge occurred.&lt;/p>
&lt;h2 id="undoing-the-last-few-git-operations-affecting-headmy-branchs-tip">Undoing the last few git operations affecting HEAD/my branch&amp;rsquo;s tip&lt;/h2>
&lt;p>Practically every git operation which affects the repository is recorded in the git reflog. You may then use the reflog to look at the state of the branches at previous times or even go back to the state of the local branch at the time.&lt;/p>
&lt;p>While this happens for every git command affecting HEAD, it is usually most interesting when attempting to recover from a bad rebase or reset or an &lt;code>--amend&lt;/code>&amp;lsquo;ed commit. There are better ways (listed by the rest of this document) from recovering from the more mundane reflog updates.&lt;/p>
&lt;p>The first thing you need to do is identify the SHA of the good state of your branch. You can do this by looking at the output of &lt;code>git log -g&lt;/code> or, my preference, you can look graphically at &lt;code>gitk --all --date-order $(git log -g --pretty=%H)&lt;/code>.&lt;/p>
&lt;p>Once you have found the correct state of your branch, you can get back to that state by running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git reset --hard SHA
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You could also link that old state to a new branch name using&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git checkout -b newbranch SHA
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Obviously replace &lt;code>SHA&lt;/code> in both commands with the reference you want to get back to.&lt;/p>
&lt;p>Note that any other commits you have performed since you did that &amp;ldquo;bad&amp;rdquo; operation will then be lost. You could &lt;code>git cherry-pick&lt;/code> or &lt;code>git rebase -p --onto&lt;/code> those other commits over.&lt;/p>
&lt;script async src="https://comments.app/js/widget.js?3" data-comments-app-website="u3US6zJB" data-limit="5" data-color="343638">&lt;/script></content></item><item><title>A Comprehensive Guide to Sorting in Pandas</title><link>/blog/sorting_in_pandas/</link><pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate><guid>/blog/sorting_in_pandas/</guid><description>In order to sort rows in Pandas, you can use the sort_values() function. I have taken examples from this excellant blog. Although it shows a lot of the use cases covered here, the last case is absent pretty much everywhere.
In this tutorial, I will be showing how to use Pandas to sort rows based on different criterion.
You can run a colab notebook containing all code present in this post by clicking here.</description><content>&lt;p>In order to sort rows in &lt;code>Pandas&lt;/code>, you can use the &lt;code>sort_values()&lt;/code> function. I have taken examples from this excellant &lt;a href="https://datatofish.com/sort-pandas-dataframe/">blog&lt;/a>. Although it shows a lot of the use cases covered here, the last case is absent pretty much everywhere.&lt;/p>
&lt;p>In this tutorial, I will be showing how to use &lt;code>Pandas&lt;/code> to sort rows based on different criterion.&lt;/p>
&lt;p>You can run a colab notebook containing all code present in this post by clicking here.
&lt;a href="https://colab.research.google.com/gist/somnathrakshit/88a4684a1eb97b782b07a2f758ad3e3c/pandas_sort.ipynb" target="_parent">&lt;img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/>&lt;/a>&lt;/p>
&lt;p>Let us create our &lt;code>DataFrame&lt;/code> (df) in pandas&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pandas &lt;span style="color:#f92672">import&lt;/span> DataFrame
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;Honda Civic&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Toyota Corolla&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Ford Focus&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Audi A4&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">22000&lt;/span>, &lt;span style="color:#ae81ff">25000&lt;/span>, &lt;span style="color:#ae81ff">27000&lt;/span>, &lt;span style="color:#ae81ff">35000&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">2015&lt;/span>, &lt;span style="color:#ae81ff">2013&lt;/span>, &lt;span style="color:#ae81ff">2018&lt;/span>, &lt;span style="color:#ae81ff">2018&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> DataFrame(Cars, columns&lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="column-in-an-ascending-order">Column in an ascending order&lt;/h2>
&lt;p>To sort this df based on the column &lt;code>Brand&lt;/code>, we can use the &lt;code>sort_values()&lt;/code> function in this manner. Here, &lt;code>inplace=True&lt;/code> means that the df will be sorted in-memory. Also, by default, the &lt;code>df&lt;/code> is sorted in ascending order. But we can change it easily, as will be shown later.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;p>The complete code to perform the task above is shown below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pandas &lt;span style="color:#f92672">import&lt;/span> DataFrame
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;Honda Civic&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Toyota Corolla&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Ford Focus&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Audi A4&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">22000&lt;/span>,&lt;span style="color:#ae81ff">25000&lt;/span>,&lt;span style="color:#ae81ff">27000&lt;/span>,&lt;span style="color:#ae81ff">35000&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">2015&lt;/span>,&lt;span style="color:#ae81ff">2013&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> DataFrame(Cars, columns&lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sort Brand - ascending order&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="column-in-an-descending-order">Column in an descending order&lt;/h2>
&lt;p>Now, suppose we would like to sort df in descending order. Well, &lt;code>sort_values()&lt;/code> accepts a paramter named &lt;code>ascending&lt;/code>. By passing &lt;code>ascending=True&lt;/code>, you can sort the df in descending order. The code is given below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, ascending&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sort - descending order&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pandas &lt;span style="color:#f92672">import&lt;/span> DataFrame
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;Honda Civic&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Toyota Corolla&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Ford Focus&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Audi A4&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">22000&lt;/span>,&lt;span style="color:#ae81ff">25000&lt;/span>,&lt;span style="color:#ae81ff">27000&lt;/span>,&lt;span style="color:#ae81ff">35000&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">2015&lt;/span>,&lt;span style="color:#ae81ff">2013&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> DataFrame(Cars, columns&lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sort Brand - descending order&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, ascending&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="by-multiple-columns---same-data-type">By multiple columns - Same data type&lt;/h2>
&lt;p>In the next step, we would like to sort based on two columns. So, here, we first sort by &lt;code>Year&lt;/code> and then by the &lt;code>Price&lt;/code> of the car. &lt;code>sort_values()&lt;/code> accepts a parameter called by. The by paramters can accept a string literal or it can accept a list. We simply need to pass the list containing the columns by which we want the df to be sorted. This is shown below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sort by multiple columns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pandas &lt;span style="color:#f92672">import&lt;/span> DataFrame
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;Honda Civic&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Toyota Corolla&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Ford Focus&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Audi A4&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">22000&lt;/span>,&lt;span style="color:#ae81ff">25000&lt;/span>,&lt;span style="color:#ae81ff">27000&lt;/span>,&lt;span style="color:#ae81ff">35000&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">2015&lt;/span>,&lt;span style="color:#ae81ff">2013&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> DataFrame(Cars, columns&lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sort by multiple columns: Year and Price&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="by-multiple-columns---mixed-data-type">By multiple columns - Mixed data type&lt;/h2>
&lt;p>It is also possible to pass mixed type of columns to be sorted. For example, we can pass the &lt;code>Year&lt;/code> column (integer) and the &lt;code>Brand&lt;/code> column (string). Pandas accepts this without any problem.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sort by multiple columns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pandas &lt;span style="color:#f92672">import&lt;/span> DataFrame
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;Honda Civic&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Toyota Corolla&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Ford Focus&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Audi A4&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">22000&lt;/span>,&lt;span style="color:#ae81ff">25000&lt;/span>,&lt;span style="color:#ae81ff">27000&lt;/span>,&lt;span style="color:#ae81ff">35000&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">2015&lt;/span>,&lt;span style="color:#ae81ff">2013&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> DataFrame(Cars, columns&lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sort by multiple columns: Year and Brand&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h2 id="by-multiple-columns-and-mixed-order">By multiple columns and mixed order&lt;/h2>
&lt;p>Last but not the least, it is also possible to sort multiple columns in mixed order. For example, we may want to sort by &lt;code>Year&lt;/code> and &lt;code>Brand&lt;/code> where the &lt;code>Year&lt;/code> column needs to be sorted in descending order whereas the &lt;code>Brand&lt;/code> column needs to be sorted in ascening order. Pandas performs this by accepting list in addition to a boolean variable to the &lt;code>ascending&lt;/code> parameter. The correct intuitive way of doing this is shown below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>], ascending&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#66d9ef">False&lt;/span>, &lt;span style="color:#66d9ef">True&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sort by multiple columns but different order&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pandas &lt;span style="color:#f92672">import&lt;/span> DataFrame
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cars &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;Honda Civic&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Toyota Corolla&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Ford Focus&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Audi A4&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">22000&lt;/span>,&lt;span style="color:#ae81ff">25000&lt;/span>,&lt;span style="color:#ae81ff">27000&lt;/span>,&lt;span style="color:#ae81ff">35000&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>: [&lt;span style="color:#ae81ff">2015&lt;/span>,&lt;span style="color:#ae81ff">2013&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>,&lt;span style="color:#ae81ff">2018&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> DataFrame(Cars, columns&lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Price&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sort by multiple columns: Year and Brand&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Year&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Brand&amp;#39;&lt;/span>], ascending&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#66d9ef">False&lt;/span>, &lt;span style="color:#66d9ef">True&lt;/span>], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div>
&lt;style scoped>
.dataframe tbody tr th:only-of-type {
vertical-align: middle;
}
&lt;pre>&lt;code>.dataframe tbody tr th {
vertical-align: top;
}
.dataframe thead th {
text-align: right;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;/style>&lt;/p>
&lt;table border="1" class="dataframe">
&lt;thead>
&lt;tr style="text-align: right;">
&lt;th>&lt;/th>
&lt;th>Brand&lt;/th>
&lt;th>Price&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;th>3&lt;/th>
&lt;td>Audi A4&lt;/td>
&lt;td>35000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>2&lt;/th>
&lt;td>Ford Focus&lt;/td>
&lt;td>27000&lt;/td>
&lt;td>2018&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>0&lt;/th>
&lt;td>Honda Civic&lt;/td>
&lt;td>22000&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;th>1&lt;/th>
&lt;td>Toyota Corolla&lt;/td>
&lt;td>25000&lt;/td>
&lt;td>2013&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;p>You can know more about sorting in Pandas by visiting the &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sort_values.html">official documentation&lt;/a>.&lt;/p>
&lt;script async src="https://comments.app/js/widget.js?3" data-comments-app-website="u3US6zJB" data-limit="5" data-color="343638">&lt;/script></content></item></channel></rss>